// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User{
  id String @id @default(uuid())
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String?
  // songEntries SongEntry[] @relation("addedBy")
  // upvotes Upvote[]
  // roomId String @unique
  // room Room[] @relation("hostedBy")
}

enum RoomType {
  PUBLIC
  PRIVATE
}

model Room{
  id String @id @default(uuid())
  name String
  thumbnail String
  type RoomType @default(PUBLIC)
  password String?
  hostId String 
  // user User @relation("hostedBy",fields: [hostId], references: [id])
  songEntries SongEntry[] 
  activeSong ActiveSong? 
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model SongEntry{
  id String @id @default(uuid())
  name String
  url String
  thumbnail String
  active Boolean @default(false)
  played Boolean @default(false)
  duration Int   @default(0)// Seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId String
  userId String
  // addedBy User @relation("addedBy",fields: [userId], references: [id])
  upvotes Upvote[]
  activeSong ActiveSong?
}

model Upvote{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songEntry SongEntry @relation(fields: [songEntryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  songEntryId String
  userId String
  // user User @relation(fields: [userId], references: [id])
  @@unique([songEntryId, userId])
}

model ActiveSong{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  isPlaying Boolean @default(true)
  activeSongId String @unique
  roomId String
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  songId String @unique
  song SongEntry @relation(fields:[songId],references:[id],onDelete: Cascade,onUpdate: Cascade) 
  @@unique([roomId])
}

